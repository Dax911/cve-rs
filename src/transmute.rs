/// An implementation of the [`std::mem::transmute`] function, purely in safe Rust.

static UNIT: &'static &() = &&();

fn exploit<'a, 'b, T>(_: &'a &'b (), v: &'b mut T) -> &'a mut T {
	v
}
fn extend_lifetime<'a, T>(x: &'a mut T) -> &'static mut T {
	let f: fn(_, &'a mut T) -> &'static mut T = exploit;
	f(UNIT, x)
}

#[inline(never)]
#[allow(clippy::pedantic)]
fn get_dangling_ref<B>() -> &'static mut &'static mut Option<Box<B>> {
	extend_lifetime(&mut extend_lifetime(&mut None))
}

#[inline(never)]
fn fill_memory<A>(val: &A) {
	std::hint::black_box([&val; 256]);
}

/// Interprets a value of type `A` as a value of type `B`. Equivalent of [`std::mem::transmute`], but implemented in safe code only.
#[allow(clippy::pedantic)]
pub fn transmute<A: Sized + 'static, B: Sized + 'static>(obj: A) -> B {
	let ref_to_box = Box::leak(Box::new(obj));
	let ref_to_b = get_dangling_ref::<B>();
	fill_memory(ref_to_box);
	*ref_to_b.take().unwrap()
}
use std::io::Write;

#[cfg(test)]
mod tests {
	#![allow(unsafe_code)]

	#[test]
	#[allow(
		clippy::transmute_float_to_int,
		clippy::unreadable_literal,
		clippy::transmute_num_to_bytes
	)]
	fn test_transmute() {
		use crate::transmute;
		use std::mem;

		unsafe {
			assert_eq!(
				transmute::transmute::<f32, i32>(420.69),
				mem::transmute::<f32, i32>(420.69)
			);
			assert_eq!(
				transmute::transmute::<u32, i32>(0xf0000000),
				mem::transmute::<u32, i32>(0xf0000000)
			);
			assert_eq!(
				transmute::transmute::<f64, [u8; 8]>(123.456),
				mem::transmute::<f64, [u8; 8]>(123.456)
			);
			let my_ref = &42;
			assert_eq!(
				transmute::transmute::<&u8, isize>(my_ref),
				mem::transmute::<&u8, isize>(my_ref)
			);
			assert_eq!(
				transmute::transmute::<[i32; 5], [u8; 20]>([1, 2, 3, 4, 5]),
				mem::transmute::<[i32; 5], [u8; 20]>([1, 2, 3, 4, 5])
			);
		}
	}
	use super::*;
	#[test]
	fn test_transmute_boy_to_girl() {
		// Define the Boy and Girl structs with the same layout
		#[repr(C)]
		#[derive(Clone)]
		struct Boy {
			age: u32,
			name: String,
			github_username: String,
		}

		#[repr(C)]
		#[derive(Clone)]
		struct Girl {
			age: u32,
			name: String,
			github_username: String,
		}

		// Create an instance of Boy
		let boy = Boy {
			age: 25,
			name: String::from("Alice"),
			github_username: String::from("aliceGitHub"),
		};

		// Transmute the Boy into a Girl using the soundness hole exploit
		let girl: Girl = transmute(boy.clone());

		// Check that the transmuted Girl has the same properties as the original Boy
		assert_eq!(girl.age, boy.age);
		assert_eq!(girl.name, boy.name);
		assert_eq!(girl.github_username, boy.github_username);
	}
}

#[repr(C)]
#[derive(Debug)]
struct Boy {
	age: u32,
	name: String,
	github_username: String,
}
#[repr(C)]
#[derive(Debug)]
struct Girl {
	age: u32,
	name: String,
	github_username: String,
}

pub fn transmute_bin() -> std::io::Result<()> {
	let stdin = std::io::stdin();
	let mut stdout = std::io::stdout();
	stdout.write("Creating a Boy struct\n".as_bytes())?;
	stdout.write("Enter age: ".as_bytes())?;
	stdout.flush()?;
	let mut input_buf = String::new();
	stdin.read_line(&mut input_buf)?;
	let Ok(age) = input_buf.trim().parse() else {
		panic!("Invalid age");
	};
	stdout.write("Enter name: ".as_bytes())?;
	stdout.flush()?;
	input_buf.clear();
	stdin.read_line(&mut input_buf)?;
	let name = input_buf.trim().to_owned();
	stdout.write("Enter github username: ".as_bytes())?;
	stdout.flush()?;
	input_buf.clear();
	stdin.read_line(&mut input_buf)?;
	let github_username = input_buf.trim().to_owned();

	let boy: Boy = Boy {
		age,
		name,
		github_username,
	};

	println!("Before transmute: {boy:?}");

	let girl: Girl = transmute(boy);

	println!("After transmute: {girl:?}");

	Ok(())
}
